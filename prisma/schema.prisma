// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(uuid())
  name String
  email String @unique
  contactNumber String @default("")
  password String
  
  role userRoles
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  volunteerApplications VolunteerApplication[]
  active Boolean @default(true)
  
  @@map("users")
}

model Opportunity {
  id String @id @unique @default(uuid())
  image String[]
  title String
  description String
  location String
  organization String
  skillsRequired String[] @default([]) // List of skills required for the opportunity
  duration      Int  // Duration of the volunteer work
  benefit String @default("")
  startDate DateTime
  endDate DateTime
  status OpportunityStatus @default(OPEN) // Whether the opportunity is open, closed, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  volunteerApplications VolunteerApplication[]
  @@map("opportunities")
}

model VolunteerApplication {
  id String @id @unique @default(uuid())
  userId String
  opportunityId String
  status ApplicationStatus @default(PENDING) // Status of the application (PENDING, APPROVED, REJECTED)
  volunteerExperience String // Previous volunteering experience
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  opportunity Opportunity @relation(fields: [opportunityId], references: [id])
  
  @@map("volunteerApplications")
}
enum userRoles {
  User
  Admin
 
}
enum OpportunityStatus {
  OPEN
  CLOSED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}